name: 'Resource Hacker Icon Replacer'
description: 'Automatically download Resource Hacker and replace application icons'
author: 'overflow65537'

branding:
  icon: 'image'
  color: 'blue'

inputs:
  exe-path:
    description: 'Path to the executable file to modify'
    required: true
  icon-path:
    description: 'Path to the new icon file (.ico)'
    required: true
  output-path:
    description: 'Path for the output executable (optional, defaults to overwriting the input)'
    required: false
    default: ''
  resource-name:
    description: 'Resource name for the icon (default: MAINICON)'
    required: false
    default: 'MAINICON'
  resource-type:
    description: 'Resource type (default: ICONGROUP)'
    required: false
    default: 'ICONGROUP'
  resource-language:
    description: 'Resource language ID (default: 0 for neutral)'
    required: false
    default: '0'

outputs:
  output-file:
    description: 'Path to the modified executable file'
    value: ${{ steps.replace-icon.outputs.output-file }}

runs:
  using: 'composite'
  steps:
    - name: Download Resource Hacker
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Stop'
        Write-Host "Downloading Resource Hacker from official website..."
        
        $url = "https://angusj.com/resourcehacker/resource_hacker.zip"
        $zip = [System.IO.Path]::Combine($env:TEMP, "resource_hacker.zip")
        $dest = [System.IO.Path]::Combine($env:TEMP, "ResourceHacker")
        
        Write-Host "URL: $url"
        Write-Host "ZIP: $zip"
        Write-Host "DEST: $dest"
        
        Invoke-WebRequest -Uri $url -OutFile $zip -UseBasicParsing
        Write-Host "Download completed"
        
        Write-Host "Extracting Resource Hacker..."
        if (Test-Path $dest) {
          Remove-Item -Path $dest -Recurse -Force
        }
        Expand-Archive -Path $zip -DestinationPath $dest -Force
        
        $exe = Get-ChildItem -Path $dest -Filter "ResourceHacker.exe" -Recurse | Select-Object -First 1
        if ($exe) {
          Write-Host "Resource Hacker found at: $($exe.FullName)"
          $dir = $exe.DirectoryName
          Add-Content -Path $env:GITHUB_ENV -Value "RH_PATH=$dir"
        } else {
          throw "ResourceHacker.exe not found"
        }
        
        Remove-Item -Path $zip -Force
        Write-Host "Setup completed"

    - name: Verify Input Files
      shell: pwsh
      run: |
        Write-Host "Verifying input files..."
        
        $exePath = "${{ inputs.exe-path }}"
        $iconPath = "${{ inputs.icon-path }}"
        
        if (-not (Test-Path $exePath)) {
          throw "Executable file not found: $exePath"
        }
        Write-Host "Found executable: $exePath"
        
        if (-not (Test-Path $iconPath)) {
          throw "Icon file not found: $iconPath"
        }
        Write-Host "Found icon: $iconPath"
        
        if (-not $iconPath.EndsWith('.ico')) {
          Write-Warning "Icon file should have .ico extension"
        }

    - name: Replace Icon
      id: replace-icon
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Stop'
        
        $exePath = "${{ inputs.exe-path }}"
        $iconPath = "${{ inputs.icon-path }}"
        $outputPath = "${{ inputs.output-path }}"
        $resourceName = "${{ inputs.resource-name }}"
        $resourceType = "${{ inputs.resource-type }}"
        $resourceLang = "${{ inputs.resource-language }}"
        
        if ([string]::IsNullOrWhiteSpace($outputPath)) {
          $outputPath = $exePath
          Write-Host "Output will overwrite input file: $outputPath"
        } else {
          Write-Host "Output will be saved to: $outputPath"
        }
        
        $mask = "$resourceType,$resourceName,$resourceLang"
        $rhExe = [System.IO.Path]::Combine($env:RH_PATH, "ResourceHacker.exe")
        
        Write-Host "Replacing icon with Resource Hacker..."
        Write-Host "Executable: $exePath"
        Write-Host "Icon: $iconPath"
        Write-Host "Resource Mask: $mask"
        Write-Host "RH Path: $rhExe"
        
        $logFile = [System.IO.Path]::Combine($env:TEMP, "resourcehacker_log.txt")
        
        # Execute Resource Hacker
        $process = Start-Process -FilePath $rhExe -ArgumentList "-open `"$exePath`" -save `"$outputPath`" -action addoverwrite -res `"$iconPath`" -mask $mask -log `"$logFile`"" -Wait -PassThru -NoNewWindow
        
        $exitCode = $process.ExitCode
        
        Write-Host "Exit Code: $exitCode"
        
        if (Test-Path $logFile) {
          Write-Host "`nResource Hacker Log:"
          Get-Content $logFile | ForEach-Object { Write-Host "  $_" }
        }
        
        if ($exitCode -ne 0) {
          throw "Resource Hacker failed with exit code: $exitCode"
        }
        
        if (-not (Test-Path $outputPath)) {
          throw "Output file was not created: $outputPath"
        }
        
        Write-Host "Icon replaced successfully!"
        Write-Host "Output file: $outputPath"
        
        Add-Content -Path $env:GITHUB_OUTPUT -Value "output-file=$outputPath"

    - name: Cleanup
      if: always()
      shell: pwsh
      run: |
        Write-Host "Cleaning up temporary files..."
        $extractPath = [System.IO.Path]::Combine($env:TEMP, "ResourceHacker")
        if (Test-Path $extractPath) {
          Remove-Item -Path $extractPath -Recurse -Force -ErrorAction SilentlyContinue
          Write-Host "Cleanup completed"
        }
