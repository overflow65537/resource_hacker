name: Test Action

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-action:
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Create test executable
        shell: powershell
        run: |
          Write-Host "Creating test executable..."
          
          # Use dotnet to create a simple executable
          Write-Host "Using dotnet to create executable..."
          dotnet new console -n TestApp -o TestApp --force
          
          # Modify Program.cs to be simple
          Set-Content -Path "TestApp/Program.cs" -Value "using System; Console.WriteLine(`"Test Application`");"
          
          # Publish as self-contained exe
          dotnet publish TestApp -c Release -o output --self-contained false
          
          # Find the exe file
          $exeFile = Get-ChildItem -Path "output" -Filter "*.exe" | Select-Object -First 1
          if ($exeFile) {
            Copy-Item -Path $exeFile.FullName -Destination "test.exe"
            Write-Host "✅ Test executable created"
            $size = (Get-Item "test.exe").Length
            Write-Host "   File size: $size bytes"
          } else {
            Write-Error "❌ Failed to create test executable"
            exit 1
          }
      
      - name: Create test icon
        shell: powershell
        run: |
          Write-Host "Creating test icon..."
          
          # Create a proper 16x16 icon file (valid .ico format)
          # This is a minimal valid .ico file with a 16x16 blue square
          $iconBytes = [System.Convert]::FromBase64String("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///z////8/////P////z////8/////P////z////8/////P////z////8/////PwAAAAAAAAAAAAAAAP///z//////////////////////////////////////////////////////////////////////P////z8AAAAAAAAAAP///z//////////////////////////////////////////////////////////////////////P////z8AAAAAAAAAAP///z//////////////////////////////////////////////////////////////////////P////z8AAAAAAAAAAP///z//////////////////////////////////////////////////////////////////////P////z8AAAAAAAAAAP///z//////////////////////////////////////////////////////////////////////P////z8AAAAAAAAAAP///z//////////////////////////////////////////////////////////////////////P////z8AAAAAAAAAAP///z//////////////////////////////////////////////////////////////////////P////z8AAAAAAAAAAP///z//////////////////////////////////////////////////////////////////////P////z8AAAAAAAAAAP///z//////////////////////////////////////////////////////////////////////P////z8AAAAAAAAAAP///z//////////////////////////////////////////////////////////////////////P////z8AAAAAAAAAAP///z//////////////////////////////////////////////////////////////////////P////z8AAAAAAAAAAP///z//////////////////////////////////////////////////////////////////////P////z8AAAAAAAAAAP///z////8/////P////z////8/////P////z////8/////P////z////8/////PwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAA=")
          
          [System.IO.File]::WriteAllBytes("$PWD\test.ico", $iconBytes)
          
          if (Test-Path "test.ico") {
            Write-Host "✅ Test icon created"
            $size = (Get-Item "test.ico").Length
            Write-Host "   Icon file size: $size bytes"
          } else {
            Write-Error "❌ Failed to create test icon"
            exit 1
          }
      
      - name: Test icon replacement
        uses: ./
        with:
          exe-path: 'test.exe'
          icon-path: 'test.ico'
          output-path: 'test_modified.exe'
      
      - name: Verify output
        shell: powershell
        run: |
          if (Test-Path "test_modified.exe") {
            Write-Host "✅ Modified executable exists"
            $size = (Get-Item "test_modified.exe").Length
            Write-Host "   File size: $size bytes"
          } else {
            Write-Error "❌ Modified executable not found"
            exit 1
          }
      
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test.exe
            test_modified.exe
            test.ico
